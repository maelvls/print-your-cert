#! /usr/bin/env bash

# entr bash -c "./pem-to-png <foo.crt" <<<$'pem-to-png\n'

set -euo pipefail

help() {
    cat <<EOF
USAGE
  pem-to-png [OPTIONS]

OPTIONS
  --file-prefix <prefix>
        Save the images as <prefix>front.png and <prefix>back.png
        instead of front.png and back.png.
  --help
        Show this help message

DESCRIPTION
  pem-to-png â€“ create a PNG image from a combined PEM file. The PEM file must
  contain at least one certificate (----- BEING CERTIFICATE -----) and may
  contain a private key somewhere in the PEM content.

  The first certificate that shows up in the PEM content must be the leaf
  certificate. The key can come before or after, but the leaf must be before the
  intermediates.
EOF
}

while [[ $# -gt 0 ]]; do
    case $1 in
    --file-prefix)
        if [[ $# -lt 2 ]]; then
            echo "--file-prefix requires an argument" >&2
            exit 1
        fi
        prefix=$2
        shift 2
        ;;
    --help)
        help
        exit 0
        ;;
    *)
        echo "unknown option: $1" >&2
        exit 1
        ;;
    esac
done

echo "Reading PEM (key + chain) from stdin..." >&2
combinedPEM="$(cat)"

# When printing to the Brother QL-820WNB, the width of the image (as opposed to
# the height) is scaled to the 6.2 cm of the label tape's width. In the
# following, e.g., 984 x 696 px, means height x width. So the "second" number is
# the one scaled to 6.2 cm.
#
# For example, with a portrait-mode image of 696 x 232 px, the "top" if the
# image is scaled to the width of the paper roll (6.2 cm). If the "top" is 696
# px, which the the nominal pixel width, then no scaling is neededd.
#
#                            696   x   492 px
#                            ^^^       ^^^
#                           width     height
#                          (6.2 cm)
#
#     -  -  -  -  -  -  -  -  -  -  +--------------+  ^
#                                   |    RIGHT     |  |
#                                   |              |  |
#      PAPER UNROLLS THIS WAY       | TOP          |  |  width
#      -------------------->        |              |  |  696 px
#                                   |   (normal    |  | (6.2 cm)
#                                   |    orienta.) |  |
#     -  -  -  -  -  -  -  -  -  -  +--------------+  v
#                                   <-------------->
#                                 height 492 px (2.9 cm)
#
# NOTE: to get a readable QR code, the back.png image is 696 x 545 px instead of
# 696 x 492 px.

line1=$(
    cat <<EOF
Thank you for visiting the cert-manager
booth! We hope you are enjoying
your time in Paris.
EOF
)

line2=$(
    cat <<EOF
This card is proof that you
were there! On the back of
the card, the QR code
links to your certificate.
EOF
)

convert -size 696x492 canvas:white \
    \( -gravity NorthWest -font Open-Sans-Regular -pointsize 22 -fill black -annotate +0-0 "$line1" \) -geometry +0+0 \
    \( -gravity NorthWest -font Open-Sans-Regular -pointsize 22 -fill black -annotate +0+115 "$line2" \) -geometry +0+0 \
    \( -gravity SouthWest -font DejaVu-Sans-Mono -pointsize 22 -fill black -annotate +0+0 "$(echo "$combinedPEM" | openssl x509 -in /dev/stdin | step certificate inspect --short - | sed -e 's/\[\(.*\)\]/\n\1/' -e 's/Certificate (\(.*\))/Certificate\nAlgorithm: \1/' | sed 's/^  //')" \) -geometry +0+0 \
    -background None -layers Flatten "${prefix}front.png"

# See ./js/x509.js to understand the format expected by the asn1 query parameter.

asn1=$(echo "$combinedPEM" | openssl x509 -in /dev/stdin | grep -v 'CERTIFICATE' | tr -d '$\n' | python3 -c "import urllib.parse; print(urllib.parse.quote_plus(open(0).read()))")
key=$(echo "$combinedPEM" | openssl pkey -in /dev/stdin | grep -v 'PRIVATE' | tr -d '$\n' | python3 -c "import urllib.parse; print(urllib.parse.quote_plus(open(0).read()))")
echo "https://cert-manager.github.io/print-your-cert?asn1=$asn1&key=$key" >&2
echo "https://cert-manager.github.io/print-your-cert?asn1=$asn1&key=$key" | qrencode --type PNG --margin 0 -o - | convert -size 696x545 canvas:white \
    \( -gravity Center -monochrome -filter point -interpolate nearest - -resize 545 \) -composite "${prefix}back.png"

# Example without a key:
# https://cert-manager.github.io/print-your-cert?asn1=MIICXDCCAgOgAwIBAgIQdPaTuGSUDeosii4dbdLBgTAKBggqhkjOPQQDAjAnMSUwIwYDVQQDExxUaGUgY2VydC1tYW5hZ2VyIG1haW50YWluZXJzMB4XDTIyMDUxNjEzMDkwMFoXDTIyMDgxNDEzMDkwMFowLDEqMCgGA1UEAwwhZm9vIGJhciBmb28gYmFyIDxmb28uYmFyQGJhci5mb28%2BMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAtmGM5lil9Vw%2Fy5LhpgO8t5gSb5oUo%2BDp5vWw0Z5C7rjvifi0%2FeD9MbVFkxb%2B%2BhmOaaNCVgqDUio1OBOZyL90KzdnGW7nz1fRM2KCNrDF5Y1mO7uv1ZTZa8cVBjF67KjFuNkvvHp74m65bKwXeCHXJBmO3Z1FH8hudICU74%2BNl6tyjlMOsTHv%2BLY0jPfmAtO6eR%2BEf%2FHvgzwsjKds12vdlRCdHSS6u5zlrZZxF3zTO7YuAM7mN8Wbjq94YcpgsJ5ssNOtMu9FwZtPGQDHPaQyVQ86FfjhmMi1IUOUAAGwh%2FQRv8ksX%2BOupHTNdH06WmIDCaGBjWFgPkwicavMZgZG3QIDAQABo0EwPzAOBgNVHQ8BAf8EBAMCBaAwDAYDVR0TAQH%2FBAIwADAfBgNVHSMEGDAWgBQG5XQnDhOUa748L9H7TWZN2avluTAKBggqhkjOPQQDAgNHADBEAiBXmyJ24PTG76pEyq6AQtCo6TXEidqJhsmK9O5WjGBw7wIgaPbcFI5iMMgfPGEATH2AGGutZ6MlxBmwhEO7pAkqhQc%3D
#
# Example with a key:
# https://cert-manager.github.io/print-your-cert?asn1=MIIB0DCCAXagAwIBAgIQWAoGJWnoYNfbqUzmYyMqmjAKBggqhkjOPQQDAjBaMQswCQYDVQQGEwJGUjENMAsGA1UEChMEQ05DRjEVMBMGA1UECxMMY2VydC1tYW5hZ2VyMSUwIwYDVQQDExxUaGUgY2VydC1tYW5hZ2VyIG1haW50YWluZXJzMCAXDTI0MDMxNDE1MTA0NFoYDzIwNTQwMzA3MTUxMDQ0WjAbMQswCQYDVQQGEwJGUjEMMAoGA1UEAxMDRm9vMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE4pc0prMyiFxKiA2kbVrnhoBo5yq1vstBflMoCQ7tG5jZTlvlnB%2BZKvlIs9xu6IOTwQRGRb87Vr15N7FsxFUA9KNbMFkwDgYDVR0PAQH%2FBAQDAgWgMAwGA1UdEwEB%2FwQCMAAwHwYDVR0jBBgwFoAUoVmkv3mQGC9o5sHbtSZPstHCpjkwGAYDVR0RBBEwD4ENZm9vQHNkYXNkYS5mcjAKBggqhkjOPQQDAgNIADBFAiAO1fav7a1PY6m2ewUj0iHEOdRHmfBNBeMNd95e7V4uSgIhAMzIasuW9Nkds%2Fm6CMfILVDho0aXcunBWI4aEKEQuEPv&key=MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgXMl4DsNH0Ib6al8CcC%2BwDuZYnz4bBhursio%2FGYnQM5ihRANCAATilzSmszKIXEqIDaRtWueGgGjnKrW%2By0F%2BUygJDu0bmNlOW%2BWcH5kq%2BUiz3G7og5PBBEZFvztWvXk3sWzEVQD0
